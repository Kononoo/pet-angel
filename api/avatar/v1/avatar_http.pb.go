// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: avatar/v1/avatar.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAvatarServiceChat = "/api.avatar.v1.AvatarService/Chat"
const OperationAvatarServiceChatStream = "/api.avatar.v1.AvatarService/ChatStream"
const OperationAvatarServiceGetItems = "/api.avatar.v1.AvatarService/GetItems"
const OperationAvatarServiceGetModels = "/api.avatar.v1.AvatarService/GetModels"
const OperationAvatarServiceSetPetModel = "/api.avatar.v1.AvatarService/SetPetModel"
const OperationAvatarServiceUseItem = "/api.avatar.v1.AvatarService/UseItem"

type AvatarServiceHTTPServer interface {
	// Chat 发送一条聊天消息给 AI（同步返回本条消息；可选返回AI的即时回复）
	Chat(context.Context, *ChatRequest) (*ChatReply, error)
	// ChatStream 流式聊天（服务端以 SSE 持续返回 AI 回复片段；前端逐段渲染）
	// 备注：本接口仅支持 HTTP，GRPC 下可另行定义 bidi-stream。
	ChatStream(context.Context, *ChatRequest) (*ChatReply, error)
	// GetItems 获取道具列表
	GetItems(context.Context, *GetItemsRequest) (*GetItemsReply, error)
	// GetModels 获取可用的宠物模型列表
	GetModels(context.Context, *GetModelsRequest) (*GetModelsReply, error)
	// SetPetModel 设置当前宠物模型
	SetPetModel(context.Context, *SetPetModelRequest) (*SetPetModelReply, error)
	// UseItem 使用一个道具（例如喂食/玩具等）
	UseItem(context.Context, *UseItemRequest) (*UseItemReply, error)
}

func RegisterAvatarServiceHTTPServer(s *http.Server, srv AvatarServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/avatar/models", _AvatarService_GetModels0_HTTP_Handler(srv))
	r.POST("/v1/avatar/model", _AvatarService_SetPetModel0_HTTP_Handler(srv))
	r.GET("/v1/avatar/items", _AvatarService_GetItems0_HTTP_Handler(srv))
	r.POST("/v1/avatar/use-item", _AvatarService_UseItem0_HTTP_Handler(srv))
	r.POST("/v1/avatar/chat", _AvatarService_Chat0_HTTP_Handler(srv))
	r.POST("/v1/avatar/chat/stream", _AvatarService_ChatStream0_HTTP_Handler(srv))
}

func _AvatarService_GetModels0_HTTP_Handler(srv AvatarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetModelsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAvatarServiceGetModels)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetModels(ctx, req.(*GetModelsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetModelsReply)
		return ctx.Result(200, reply)
	}
}

func _AvatarService_SetPetModel0_HTTP_Handler(srv AvatarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetPetModelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAvatarServiceSetPetModel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetPetModel(ctx, req.(*SetPetModelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetPetModelReply)
		return ctx.Result(200, reply)
	}
}

func _AvatarService_GetItems0_HTTP_Handler(srv AvatarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetItemsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAvatarServiceGetItems)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetItems(ctx, req.(*GetItemsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetItemsReply)
		return ctx.Result(200, reply)
	}
}

func _AvatarService_UseItem0_HTTP_Handler(srv AvatarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UseItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAvatarServiceUseItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UseItem(ctx, req.(*UseItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UseItemReply)
		return ctx.Result(200, reply)
	}
}

func _AvatarService_Chat0_HTTP_Handler(srv AvatarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAvatarServiceChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Chat(ctx, req.(*ChatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChatReply)
		return ctx.Result(200, reply)
	}
}

func _AvatarService_ChatStream0_HTTP_Handler(srv AvatarServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAvatarServiceChatStream)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChatStream(ctx, req.(*ChatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChatReply)
		return ctx.Result(200, reply)
	}
}

type AvatarServiceHTTPClient interface {
	Chat(ctx context.Context, req *ChatRequest, opts ...http.CallOption) (rsp *ChatReply, err error)
	ChatStream(ctx context.Context, req *ChatRequest, opts ...http.CallOption) (rsp *ChatReply, err error)
	GetItems(ctx context.Context, req *GetItemsRequest, opts ...http.CallOption) (rsp *GetItemsReply, err error)
	GetModels(ctx context.Context, req *GetModelsRequest, opts ...http.CallOption) (rsp *GetModelsReply, err error)
	SetPetModel(ctx context.Context, req *SetPetModelRequest, opts ...http.CallOption) (rsp *SetPetModelReply, err error)
	UseItem(ctx context.Context, req *UseItemRequest, opts ...http.CallOption) (rsp *UseItemReply, err error)
}

type AvatarServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAvatarServiceHTTPClient(client *http.Client) AvatarServiceHTTPClient {
	return &AvatarServiceHTTPClientImpl{client}
}

func (c *AvatarServiceHTTPClientImpl) Chat(ctx context.Context, in *ChatRequest, opts ...http.CallOption) (*ChatReply, error) {
	var out ChatReply
	pattern := "/v1/avatar/chat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAvatarServiceChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AvatarServiceHTTPClientImpl) ChatStream(ctx context.Context, in *ChatRequest, opts ...http.CallOption) (*ChatReply, error) {
	var out ChatReply
	pattern := "/v1/avatar/chat/stream"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAvatarServiceChatStream))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AvatarServiceHTTPClientImpl) GetItems(ctx context.Context, in *GetItemsRequest, opts ...http.CallOption) (*GetItemsReply, error) {
	var out GetItemsReply
	pattern := "/v1/avatar/items"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAvatarServiceGetItems))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AvatarServiceHTTPClientImpl) GetModels(ctx context.Context, in *GetModelsRequest, opts ...http.CallOption) (*GetModelsReply, error) {
	var out GetModelsReply
	pattern := "/v1/avatar/models"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAvatarServiceGetModels))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AvatarServiceHTTPClientImpl) SetPetModel(ctx context.Context, in *SetPetModelRequest, opts ...http.CallOption) (*SetPetModelReply, error) {
	var out SetPetModelReply
	pattern := "/v1/avatar/model"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAvatarServiceSetPetModel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AvatarServiceHTTPClientImpl) UseItem(ctx context.Context, in *UseItemRequest, opts ...http.CallOption) (*UseItemReply, error) {
	var out UseItemReply
	pattern := "/v1/avatar/use-item"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAvatarServiceUseItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
