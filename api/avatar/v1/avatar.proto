syntax = "proto3";

package api.avatar.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "pet-angel/api/avatar/v1;v1";

// 虚拟形象服务
service AvatarService {
  // 获取虚拟形象列表
  rpc GetAvatarList(GetAvatarListRequest) returns (GetAvatarListReply) {
    option (google.api.http) = {
      get: "/v1/avatar/list"
    };
  }

  // 获取用户当前形象
  rpc GetCurrentAvatar(GetCurrentAvatarRequest) returns (GetCurrentAvatarReply) {
    option (google.api.http) = {
      get: "/v1/avatar/current"
    };
  }

  // 切换虚拟形象
  rpc SwitchAvatar(SwitchAvatarRequest) returns (SwitchAvatarReply) {
    option (google.api.http) = {
      post: "/v1/avatar/switch"
      body: "*"
    };
  }

  // 获取道具列表
  rpc GetPropList(GetPropListRequest) returns (GetPropListReply) {
    option (google.api.http) = {
      get: "/v1/avatar/props"
    };
  }

  // 使用道具
  rpc UseProp(UsePropRequest) returns (UsePropReply) {
    option (google.api.http) = {
      post: "/v1/avatar/props/use"
      body: "*"
    };
  }

  // 获取道具分类
  rpc GetPropCategories(GetPropCategoriesRequest) returns (GetPropCategoriesReply) {
    option (google.api.http) = {
      get: "/v1/avatar/prop-categories"
    };
  }

  // 获取对话记录
  rpc GetChatHistory(GetChatHistoryRequest) returns (GetChatHistoryReply) {
    option (google.api.http) = {
      get: "/v1/avatar/chat-history"
    };
  }

  // 发送消息
  rpc SendMessage(SendMessageRequest) returns (SendMessageReply) {
    option (google.api.http) = {
      post: "/v1/avatar/send-message"
      body: "*"
    };
  }

  // 生成虚拟形象
  rpc GenerateAvatar(GenerateAvatarRequest) returns (GenerateAvatarReply) {
    option (google.api.http) = {
      post: "/v1/avatar/generate"
      body: "*"
    };
  }
}

// 虚拟形象信息
message Avatar {
  int64 avatar_id = 1;
  string name = 2;
  string resource_path = 3;
  string idle_animation = 4;
  string switch_animation = 5;
  int32 sort_order = 6;
  bool is_default = 7;
  bool is_unlocked = 8;
  google.protobuf.Timestamp created_at = 9;
}

// 用户当前形象
message UserAvatar {
  int64 user_id = 1;
  int64 avatar_id = 2;
  google.protobuf.Timestamp last_switch_time = 3;
  Avatar avatar = 4;
}

// 道具信息
message Prop {
  int64 prop_id = 1;
  string name = 2;
  int64 category_id = 3;
  string icon_path = 4;
  int32 coin_cost = 5;
  string effect_description = 6;
  int32 user_quantity = 7;
}

// 道具分类
message PropCategory {
  int64 category_id = 1;
  string name = 2;
  repeated int64 prop_ids = 3;
  int32 sort_order = 4;
}

// 聊天消息
message ChatMessage {
  int64 message_id = 1;
  int64 user_id = 2;
  string sender = 3; // user, avatar
  string content = 4;
  string message_type = 5; // text, prop_use, note
  int64 related_id = 6; // prop_id or note_id
  google.protobuf.Timestamp created_at = 7;
}

// 获取虚拟形象列表请求
message GetAvatarListRequest {
}

// 获取虚拟形象列表响应
message GetAvatarListReply {
  repeated Avatar avatars = 1;
}

// 获取用户当前形象请求
message GetCurrentAvatarRequest {
}

// 获取用户当前形象响应
message GetCurrentAvatarReply {
  UserAvatar user_avatar = 1;
}

// 切换虚拟形象请求
message SwitchAvatarRequest {
  int64 avatar_id = 1;
}

// 切换虚拟形象响应
message SwitchAvatarReply {
  UserAvatar user_avatar = 1;
}

// 获取道具列表请求
message GetPropListRequest {
  int64 category_id = 1;
}

// 获取道具列表响应
message GetPropListReply {
  repeated Prop props = 1;
}

// 使用道具请求
message UsePropRequest {
  int64 prop_id = 1;
}

// 使用道具响应
message UsePropReply {
  bool success = 1;
  string message = 2;
}

// 获取道具分类请求
message GetPropCategoriesRequest {
}

// 获取道具分类响应
message GetPropCategoriesReply {
  repeated PropCategory categories = 1;
}

// 获取对话记录请求
message GetChatHistoryRequest {
  int32 page = 1;
  int32 page_size = 2;
}

// 获取对话记录响应
message GetChatHistoryReply {
  repeated ChatMessage messages = 1;
  int32 total = 2;
}

// 发送消息请求
message SendMessageRequest {
  string content = 1;
}

// 发送消息响应
message SendMessageReply {
  ChatMessage message = 1;
}

// 生成虚拟形象请求
message GenerateAvatarRequest {
  string image_url = 1;
  string pet_name = 2;
  string pet_species = 3;
}

// 生成虚拟形象响应
message GenerateAvatarReply {
  Avatar avatar = 1;
  int32 remaining_attempts = 2;
} 