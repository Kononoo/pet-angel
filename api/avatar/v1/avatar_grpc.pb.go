// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: avatar/v1/avatar.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AvatarService_GetModels_FullMethodName   = "/api.avatar.v1.AvatarService/GetModels"
	AvatarService_SetPetModel_FullMethodName = "/api.avatar.v1.AvatarService/SetPetModel"
	AvatarService_GetItems_FullMethodName    = "/api.avatar.v1.AvatarService/GetItems"
	AvatarService_UseItem_FullMethodName     = "/api.avatar.v1.AvatarService/UseItem"
	AvatarService_Chat_FullMethodName        = "/api.avatar.v1.AvatarService/Chat"
	AvatarService_ChatStream_FullMethodName  = "/api.avatar.v1.AvatarService/ChatStream"
)

// AvatarServiceClient is the client API for AvatarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 虚拟形象/道具/聊天 服务
// - 模型：列出可用宠物模型并可切换
// - 道具：列出与使用（消费金币或数量的策略在服务端控制）
// - 聊天：向 AI 发送一条消息，可选返回 AI 的同步应答
type AvatarServiceClient interface {
	// 获取可用的宠物模型列表
	GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsReply, error)
	// 设置当前宠物模型
	SetPetModel(ctx context.Context, in *SetPetModelRequest, opts ...grpc.CallOption) (*SetPetModelReply, error)
	// 获取道具列表
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsReply, error)
	// 使用一个道具（例如喂食/玩具等）
	UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemReply, error)
	// 发送一条聊天消息给 AI（同步返回本条消息；可选返回AI的即时回复）
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error)
	// 流式聊天（服务端以 SSE 持续返回 AI 回复片段；前端逐段渲染）
	// 备注：本接口仅支持 HTTP，GRPC 下可另行定义 bidi-stream。
	ChatStream(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error)
}

type avatarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvatarServiceClient(cc grpc.ClientConnInterface) AvatarServiceClient {
	return &avatarServiceClient{cc}
}

func (c *avatarServiceClient) GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelsReply)
	err := c.cc.Invoke(ctx, AvatarService_GetModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) SetPetModel(ctx context.Context, in *SetPetModelRequest, opts ...grpc.CallOption) (*SetPetModelReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPetModelReply)
	err := c.cc.Invoke(ctx, AvatarService_SetPetModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemsReply)
	err := c.cc.Invoke(ctx, AvatarService_GetItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UseItemReply)
	err := c.cc.Invoke(ctx, AvatarService_UseItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatReply)
	err := c.cc.Invoke(ctx, AvatarService_Chat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarServiceClient) ChatStream(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatReply)
	err := c.cc.Invoke(ctx, AvatarService_ChatStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvatarServiceServer is the server API for AvatarService service.
// All implementations must embed UnimplementedAvatarServiceServer
// for forward compatibility.
//
// 虚拟形象/道具/聊天 服务
// - 模型：列出可用宠物模型并可切换
// - 道具：列出与使用（消费金币或数量的策略在服务端控制）
// - 聊天：向 AI 发送一条消息，可选返回 AI 的同步应答
type AvatarServiceServer interface {
	// 获取可用的宠物模型列表
	GetModels(context.Context, *GetModelsRequest) (*GetModelsReply, error)
	// 设置当前宠物模型
	SetPetModel(context.Context, *SetPetModelRequest) (*SetPetModelReply, error)
	// 获取道具列表
	GetItems(context.Context, *GetItemsRequest) (*GetItemsReply, error)
	// 使用一个道具（例如喂食/玩具等）
	UseItem(context.Context, *UseItemRequest) (*UseItemReply, error)
	// 发送一条聊天消息给 AI（同步返回本条消息；可选返回AI的即时回复）
	Chat(context.Context, *ChatRequest) (*ChatReply, error)
	// 流式聊天（服务端以 SSE 持续返回 AI 回复片段；前端逐段渲染）
	// 备注：本接口仅支持 HTTP，GRPC 下可另行定义 bidi-stream。
	ChatStream(context.Context, *ChatRequest) (*ChatReply, error)
	mustEmbedUnimplementedAvatarServiceServer()
}

// UnimplementedAvatarServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAvatarServiceServer struct{}

func (UnimplementedAvatarServiceServer) GetModels(context.Context, *GetModelsRequest) (*GetModelsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (UnimplementedAvatarServiceServer) SetPetModel(context.Context, *SetPetModelRequest) (*SetPetModelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPetModel not implemented")
}
func (UnimplementedAvatarServiceServer) GetItems(context.Context, *GetItemsRequest) (*GetItemsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedAvatarServiceServer) UseItem(context.Context, *UseItemRequest) (*UseItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseItem not implemented")
}
func (UnimplementedAvatarServiceServer) Chat(context.Context, *ChatRequest) (*ChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedAvatarServiceServer) ChatStream(context.Context, *ChatRequest) (*ChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedAvatarServiceServer) mustEmbedUnimplementedAvatarServiceServer() {}
func (UnimplementedAvatarServiceServer) testEmbeddedByValue()                       {}

// UnsafeAvatarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvatarServiceServer will
// result in compilation errors.
type UnsafeAvatarServiceServer interface {
	mustEmbedUnimplementedAvatarServiceServer()
}

func RegisterAvatarServiceServer(s grpc.ServiceRegistrar, srv AvatarServiceServer) {
	// If the following call pancis, it indicates UnimplementedAvatarServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AvatarService_ServiceDesc, srv)
}

func _AvatarService_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AvatarService_GetModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).GetModels(ctx, req.(*GetModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_SetPetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).SetPetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AvatarService_SetPetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).SetPetModel(ctx, req.(*SetPetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AvatarService_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).GetItems(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_UseItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).UseItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AvatarService_UseItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).UseItem(ctx, req.(*UseItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AvatarService_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvatarService_ChatStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServiceServer).ChatStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AvatarService_ChatStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServiceServer).ChatStream(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AvatarService_ServiceDesc is the grpc.ServiceDesc for AvatarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvatarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.avatar.v1.AvatarService",
	HandlerType: (*AvatarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModels",
			Handler:    _AvatarService_GetModels_Handler,
		},
		{
			MethodName: "SetPetModel",
			Handler:    _AvatarService_SetPetModel_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _AvatarService_GetItems_Handler,
		},
		{
			MethodName: "UseItem",
			Handler:    _AvatarService_UseItem_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _AvatarService_Chat_Handler,
		},
		{
			MethodName: "ChatStream",
			Handler:    _AvatarService_ChatStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avatar/v1/avatar.proto",
}
