// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: community/v1/community.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCommunityServiceCreateComment = "/api.community.v1.CommunityService/CreateComment"
const OperationCommunityServiceCreatePost = "/api.community.v1.CommunityService/CreatePost"
const OperationCommunityServiceGetCategories = "/api.community.v1.CommunityService/GetCategories"
const OperationCommunityServiceGetCommentList = "/api.community.v1.CommunityService/GetCommentList"
const OperationCommunityServiceGetPostDetail = "/api.community.v1.CommunityService/GetPostDetail"
const OperationCommunityServiceGetPostList = "/api.community.v1.CommunityService/GetPostList"
const OperationCommunityServiceLikeComment = "/api.community.v1.CommunityService/LikeComment"
const OperationCommunityServiceLikePost = "/api.community.v1.CommunityService/LikePost"
const OperationCommunityServiceUnlikeComment = "/api.community.v1.CommunityService/UnlikeComment"
const OperationCommunityServiceUnlikePost = "/api.community.v1.CommunityService/UnlikePost"

type CommunityServiceHTTPServer interface {
	// CreateComment 发表评论
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentReply, error)
	// CreatePost 发布帖子（图文或视频）
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostReply, error)
	// GetCategories 获取帖子分类列表
	GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesReply, error)
	// GetCommentList 获取评论列表
	GetCommentList(context.Context, *GetCommentListRequest) (*GetCommentListReply, error)
	// GetPostDetail 获取帖子详情
	GetPostDetail(context.Context, *GetPostDetailRequest) (*GetPostDetailReply, error)
	// GetPostList 获取帖子列表（支持分类、类型、排序筛选）
	GetPostList(context.Context, *GetPostListRequest) (*GetPostListReply, error)
	// LikeComment 点赞评论
	LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentReply, error)
	// LikePost 点赞帖子
	LikePost(context.Context, *LikePostRequest) (*LikePostReply, error)
	// UnlikeComment 取消点赞评论（POST /unlike）
	UnlikeComment(context.Context, *UnlikeCommentRequest) (*UnlikeCommentReply, error)
	// UnlikePost 取消点赞帖子（POST /unlike）
	UnlikePost(context.Context, *UnlikePostRequest) (*UnlikePostReply, error)
}

func RegisterCommunityServiceHTTPServer(s *http.Server, srv CommunityServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/community/categories", _CommunityService_GetCategories0_HTTP_Handler(srv))
	r.GET("/v1/community/posts", _CommunityService_GetPostList0_HTTP_Handler(srv))
	r.GET("/v1/community/posts/{post_id}", _CommunityService_GetPostDetail0_HTTP_Handler(srv))
	r.POST("/v1/community/posts", _CommunityService_CreatePost0_HTTP_Handler(srv))
	r.POST("/v1/community/posts/{post_id}/like", _CommunityService_LikePost0_HTTP_Handler(srv))
	r.POST("/v1/community/posts/{post_id}/unlike", _CommunityService_UnlikePost0_HTTP_Handler(srv))
	r.GET("/v1/community/posts/{post_id}/comments", _CommunityService_GetCommentList0_HTTP_Handler(srv))
	r.POST("/v1/community/posts/{post_id}/comments", _CommunityService_CreateComment0_HTTP_Handler(srv))
	r.POST("/v1/community/comments/{comment_id}/like", _CommunityService_LikeComment0_HTTP_Handler(srv))
	r.POST("/v1/community/comments/{comment_id}/unlike", _CommunityService_UnlikeComment0_HTTP_Handler(srv))
}

func _CommunityService_GetCategories0_HTTP_Handler(srv CommunityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCategoriesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommunityServiceGetCategories)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCategories(ctx, req.(*GetCategoriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCategoriesReply)
		return ctx.Result(200, reply)
	}
}

func _CommunityService_GetPostList0_HTTP_Handler(srv CommunityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPostListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommunityServiceGetPostList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPostList(ctx, req.(*GetPostListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPostListReply)
		return ctx.Result(200, reply)
	}
}

func _CommunityService_GetPostDetail0_HTTP_Handler(srv CommunityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPostDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommunityServiceGetPostDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPostDetail(ctx, req.(*GetPostDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPostDetailReply)
		return ctx.Result(200, reply)
	}
}

func _CommunityService_CreatePost0_HTTP_Handler(srv CommunityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommunityServiceCreatePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePost(ctx, req.(*CreatePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePostReply)
		return ctx.Result(200, reply)
	}
}

func _CommunityService_LikePost0_HTTP_Handler(srv CommunityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikePostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommunityServiceLikePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LikePost(ctx, req.(*LikePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikePostReply)
		return ctx.Result(200, reply)
	}
}

func _CommunityService_UnlikePost0_HTTP_Handler(srv CommunityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnlikePostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommunityServiceUnlikePost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnlikePost(ctx, req.(*UnlikePostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnlikePostReply)
		return ctx.Result(200, reply)
	}
}

func _CommunityService_GetCommentList0_HTTP_Handler(srv CommunityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommentListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommunityServiceGetCommentList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommentList(ctx, req.(*GetCommentListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommentListReply)
		return ctx.Result(200, reply)
	}
}

func _CommunityService_CreateComment0_HTTP_Handler(srv CommunityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommunityServiceCreateComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateComment(ctx, req.(*CreateCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCommentReply)
		return ctx.Result(200, reply)
	}
}

func _CommunityService_LikeComment0_HTTP_Handler(srv CommunityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikeCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommunityServiceLikeComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LikeComment(ctx, req.(*LikeCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikeCommentReply)
		return ctx.Result(200, reply)
	}
}

func _CommunityService_UnlikeComment0_HTTP_Handler(srv CommunityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnlikeCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommunityServiceUnlikeComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnlikeComment(ctx, req.(*UnlikeCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnlikeCommentReply)
		return ctx.Result(200, reply)
	}
}

type CommunityServiceHTTPClient interface {
	CreateComment(ctx context.Context, req *CreateCommentRequest, opts ...http.CallOption) (rsp *CreateCommentReply, err error)
	CreatePost(ctx context.Context, req *CreatePostRequest, opts ...http.CallOption) (rsp *CreatePostReply, err error)
	GetCategories(ctx context.Context, req *GetCategoriesRequest, opts ...http.CallOption) (rsp *GetCategoriesReply, err error)
	GetCommentList(ctx context.Context, req *GetCommentListRequest, opts ...http.CallOption) (rsp *GetCommentListReply, err error)
	GetPostDetail(ctx context.Context, req *GetPostDetailRequest, opts ...http.CallOption) (rsp *GetPostDetailReply, err error)
	GetPostList(ctx context.Context, req *GetPostListRequest, opts ...http.CallOption) (rsp *GetPostListReply, err error)
	LikeComment(ctx context.Context, req *LikeCommentRequest, opts ...http.CallOption) (rsp *LikeCommentReply, err error)
	LikePost(ctx context.Context, req *LikePostRequest, opts ...http.CallOption) (rsp *LikePostReply, err error)
	UnlikeComment(ctx context.Context, req *UnlikeCommentRequest, opts ...http.CallOption) (rsp *UnlikeCommentReply, err error)
	UnlikePost(ctx context.Context, req *UnlikePostRequest, opts ...http.CallOption) (rsp *UnlikePostReply, err error)
}

type CommunityServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCommunityServiceHTTPClient(client *http.Client) CommunityServiceHTTPClient {
	return &CommunityServiceHTTPClientImpl{client}
}

func (c *CommunityServiceHTTPClientImpl) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...http.CallOption) (*CreateCommentReply, error) {
	var out CreateCommentReply
	pattern := "/v1/community/posts/{post_id}/comments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommunityServiceCreateComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommunityServiceHTTPClientImpl) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...http.CallOption) (*CreatePostReply, error) {
	var out CreatePostReply
	pattern := "/v1/community/posts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommunityServiceCreatePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommunityServiceHTTPClientImpl) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...http.CallOption) (*GetCategoriesReply, error) {
	var out GetCategoriesReply
	pattern := "/v1/community/categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommunityServiceGetCategories))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommunityServiceHTTPClientImpl) GetCommentList(ctx context.Context, in *GetCommentListRequest, opts ...http.CallOption) (*GetCommentListReply, error) {
	var out GetCommentListReply
	pattern := "/v1/community/posts/{post_id}/comments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommunityServiceGetCommentList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommunityServiceHTTPClientImpl) GetPostDetail(ctx context.Context, in *GetPostDetailRequest, opts ...http.CallOption) (*GetPostDetailReply, error) {
	var out GetPostDetailReply
	pattern := "/v1/community/posts/{post_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommunityServiceGetPostDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommunityServiceHTTPClientImpl) GetPostList(ctx context.Context, in *GetPostListRequest, opts ...http.CallOption) (*GetPostListReply, error) {
	var out GetPostListReply
	pattern := "/v1/community/posts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommunityServiceGetPostList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommunityServiceHTTPClientImpl) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...http.CallOption) (*LikeCommentReply, error) {
	var out LikeCommentReply
	pattern := "/v1/community/comments/{comment_id}/like"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommunityServiceLikeComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommunityServiceHTTPClientImpl) LikePost(ctx context.Context, in *LikePostRequest, opts ...http.CallOption) (*LikePostReply, error) {
	var out LikePostReply
	pattern := "/v1/community/posts/{post_id}/like"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommunityServiceLikePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommunityServiceHTTPClientImpl) UnlikeComment(ctx context.Context, in *UnlikeCommentRequest, opts ...http.CallOption) (*UnlikeCommentReply, error) {
	var out UnlikeCommentReply
	pattern := "/v1/community/comments/{comment_id}/unlike"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommunityServiceUnlikeComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CommunityServiceHTTPClientImpl) UnlikePost(ctx context.Context, in *UnlikePostRequest, opts ...http.CallOption) (*UnlikePostReply, error) {
	var out UnlikePostReply
	pattern := "/v1/community/posts/{post_id}/unlike"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommunityServiceUnlikePost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
