// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: upload/v1/upload.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UploadService_UploadFile_FullMethodName = "/api.upload.v1.UploadService/UploadFile"
	UploadService_GetPresign_FullMethodName = "/api.upload.v1.UploadService/GetPresign"
	UploadService_UploadDone_FullMethodName = "/api.upload.v1.UploadService/UploadDone"
)

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 上传服务
// 当前实现：后端中转保存到本地服务器目录，并返回可访问 URL
// 说明：
// - 统一入口 /v1/upload/file，表单字段：file（必填），type（可选：avatar/image/video）
// - 资源会保存到 {local_root}/{type}/{YYYY/MM/DD}/ 文件夹
// - 返回可直接访问的 URL（以 public_prefix 开头，如 /static/...）
type UploadServiceClient interface {
	// 本地表单文件上传（multipart/form-data）
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileReply, error)
	// 以下接口为兼容未来直传方案的占位
	// 获取直传预签名（占位，当前返回未实现）
	GetPresign(ctx context.Context, in *GetPresignRequest, opts ...grpc.CallOption) (*GetPresignReply, error)
	// 上传完成登记（占位，当前回显输入）
	UploadDone(ctx context.Context, in *UploadDoneRequest, opts ...grpc.CallOption) (*UploadDoneReply, error)
}

type uploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadServiceClient(cc grpc.ClientConnInterface) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileReply)
	err := c.cc.Invoke(ctx, UploadService_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) GetPresign(ctx context.Context, in *GetPresignRequest, opts ...grpc.CallOption) (*GetPresignReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPresignReply)
	err := c.cc.Invoke(ctx, UploadService_GetPresign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) UploadDone(ctx context.Context, in *UploadDoneRequest, opts ...grpc.CallOption) (*UploadDoneReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadDoneReply)
	err := c.cc.Invoke(ctx, UploadService_UploadDone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServiceServer is the server API for UploadService service.
// All implementations must embed UnimplementedUploadServiceServer
// for forward compatibility.
//
// 上传服务
// 当前实现：后端中转保存到本地服务器目录，并返回可访问 URL
// 说明：
// - 统一入口 /v1/upload/file，表单字段：file（必填），type（可选：avatar/image/video）
// - 资源会保存到 {local_root}/{type}/{YYYY/MM/DD}/ 文件夹
// - 返回可直接访问的 URL（以 public_prefix 开头，如 /static/...）
type UploadServiceServer interface {
	// 本地表单文件上传（multipart/form-data）
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileReply, error)
	// 以下接口为兼容未来直传方案的占位
	// 获取直传预签名（占位，当前返回未实现）
	GetPresign(context.Context, *GetPresignRequest) (*GetPresignReply, error)
	// 上传完成登记（占位，当前回显输入）
	UploadDone(context.Context, *UploadDoneRequest) (*UploadDoneReply, error)
	mustEmbedUnimplementedUploadServiceServer()
}

// UnimplementedUploadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUploadServiceServer struct{}

func (UnimplementedUploadServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedUploadServiceServer) GetPresign(context.Context, *GetPresignRequest) (*GetPresignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresign not implemented")
}
func (UnimplementedUploadServiceServer) UploadDone(context.Context, *UploadDoneRequest) (*UploadDoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDone not implemented")
}
func (UnimplementedUploadServiceServer) mustEmbedUnimplementedUploadServiceServer() {}
func (UnimplementedUploadServiceServer) testEmbeddedByValue()                       {}

// UnsafeUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadServiceServer will
// result in compilation errors.
type UnsafeUploadServiceServer interface {
	mustEmbedUnimplementedUploadServiceServer()
}

func RegisterUploadServiceServer(s grpc.ServiceRegistrar, srv UploadServiceServer) {
	// If the following call pancis, it indicates UnimplementedUploadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UploadService_ServiceDesc, srv)
}

func _UploadService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_GetPresign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPresignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).GetPresign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_GetPresign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).GetPresign(ctx, req.(*GetPresignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_UploadDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).UploadDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_UploadDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).UploadDone(ctx, req.(*UploadDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadService_ServiceDesc is the grpc.ServiceDesc for UploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.upload.v1.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _UploadService_UploadFile_Handler,
		},
		{
			MethodName: "GetPresign",
			Handler:    _UploadService_GetPresign_Handler,
		},
		{
			MethodName: "UploadDone",
			Handler:    _UploadService_UploadDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload/v1/upload.proto",
}
