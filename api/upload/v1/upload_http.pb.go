// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: upload/v1/upload.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUploadServiceGetPresign = "/api.upload.v1.UploadService/GetPresign"
const OperationUploadServiceUploadDone = "/api.upload.v1.UploadService/UploadDone"

type UploadServiceHTTPServer interface {
	// GetPresign 获取直传预签名（推荐）
	GetPresign(context.Context, *GetPresignRequest) (*GetPresignReply, error)
	// UploadDone 上传完成登记（后端中转模式或直传完成后回调登记）
	UploadDone(context.Context, *UploadDoneRequest) (*UploadDoneReply, error)
}

func RegisterUploadServiceHTTPServer(s *http.Server, srv UploadServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/upload/presign", _UploadService_GetPresign0_HTTP_Handler(srv))
	r.POST("/v1/upload/done", _UploadService_UploadDone0_HTTP_Handler(srv))
}

func _UploadService_GetPresign0_HTTP_Handler(srv UploadServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPresignRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUploadServiceGetPresign)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPresign(ctx, req.(*GetPresignRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPresignReply)
		return ctx.Result(200, reply)
	}
}

func _UploadService_UploadDone0_HTTP_Handler(srv UploadServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadDoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUploadServiceUploadDone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadDone(ctx, req.(*UploadDoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadDoneReply)
		return ctx.Result(200, reply)
	}
}

type UploadServiceHTTPClient interface {
	GetPresign(ctx context.Context, req *GetPresignRequest, opts ...http.CallOption) (rsp *GetPresignReply, err error)
	UploadDone(ctx context.Context, req *UploadDoneRequest, opts ...http.CallOption) (rsp *UploadDoneReply, err error)
}

type UploadServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUploadServiceHTTPClient(client *http.Client) UploadServiceHTTPClient {
	return &UploadServiceHTTPClientImpl{client}
}

func (c *UploadServiceHTTPClientImpl) GetPresign(ctx context.Context, in *GetPresignRequest, opts ...http.CallOption) (*GetPresignReply, error) {
	var out GetPresignReply
	pattern := "/v1/upload/presign"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUploadServiceGetPresign))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UploadServiceHTTPClientImpl) UploadDone(ctx context.Context, in *UploadDoneRequest, opts ...http.CallOption) (*UploadDoneReply, error) {
	var out UploadDoneReply
	pattern := "/v1/upload/done"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUploadServiceUploadDone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
