// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: user/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserServiceFollowUser = "/api.user.v1.UserService/FollowUser"
const OperationUserServiceGetFollowList = "/api.user.v1.UserService/GetFollowList"
const OperationUserServiceGetLikeList = "/api.user.v1.UserService/GetLikeList"
const OperationUserServiceGetUserProfile = "/api.user.v1.UserService/GetUserProfile"
const OperationUserServiceUnfollowUser = "/api.user.v1.UserService/UnfollowUser"

type UserServiceHTTPServer interface {
	// FollowUser 关注用户
	FollowUser(context.Context, *FollowUserRequest) (*FollowUserReply, error)
	// GetFollowList 关注列表（用户关注的人）
	GetFollowList(context.Context, *GetFollowListRequest) (*GetFollowListReply, error)
	// GetLikeList 点赞列表（用户点赞过的帖子）
	GetLikeList(context.Context, *GetLikeListRequest) (*GetLikeListReply, error)
	// GetUserProfile 用户主页信息
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileReply, error)
	// UnfollowUser 取消关注
	UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserReply, error)
}

func RegisterUserServiceHTTPServer(s *http.Server, srv UserServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/follow", _UserService_FollowUser0_HTTP_Handler(srv))
	r.POST("/v1/user/unfollow", _UserService_UnfollowUser0_HTTP_Handler(srv))
	r.GET("/v1/user/{user_id}/profile", _UserService_GetUserProfile0_HTTP_Handler(srv))
	r.GET("/v1/user/follows", _UserService_GetFollowList0_HTTP_Handler(srv))
	r.GET("/v1/user/likes", _UserService_GetLikeList0_HTTP_Handler(srv))
}

func _UserService_FollowUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceFollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowUser(ctx, req.(*FollowUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowUserReply)
		return ctx.Result(200, reply)
	}
}

func _UserService_UnfollowUser0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnfollowUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceUnfollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfollowUser(ctx, req.(*UnfollowUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnfollowUserReply)
		return ctx.Result(200, reply)
	}
}

func _UserService_GetUserProfile0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfile(ctx, req.(*GetUserProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserProfileReply)
		return ctx.Result(200, reply)
	}
}

func _UserService_GetFollowList0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFollowListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetFollowList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFollowList(ctx, req.(*GetFollowListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFollowListReply)
		return ctx.Result(200, reply)
	}
}

func _UserService_GetLikeList0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLikeListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetLikeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLikeList(ctx, req.(*GetLikeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLikeListReply)
		return ctx.Result(200, reply)
	}
}

type UserServiceHTTPClient interface {
	FollowUser(ctx context.Context, req *FollowUserRequest, opts ...http.CallOption) (rsp *FollowUserReply, err error)
	GetFollowList(ctx context.Context, req *GetFollowListRequest, opts ...http.CallOption) (rsp *GetFollowListReply, err error)
	GetLikeList(ctx context.Context, req *GetLikeListRequest, opts ...http.CallOption) (rsp *GetLikeListReply, err error)
	GetUserProfile(ctx context.Context, req *GetUserProfileRequest, opts ...http.CallOption) (rsp *GetUserProfileReply, err error)
	UnfollowUser(ctx context.Context, req *UnfollowUserRequest, opts ...http.CallOption) (rsp *UnfollowUserReply, err error)
}

type UserServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserServiceHTTPClient(client *http.Client) UserServiceHTTPClient {
	return &UserServiceHTTPClientImpl{client}
}

func (c *UserServiceHTTPClientImpl) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...http.CallOption) (*FollowUserReply, error) {
	var out FollowUserReply
	pattern := "/v1/user/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceFollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) GetFollowList(ctx context.Context, in *GetFollowListRequest, opts ...http.CallOption) (*GetFollowListReply, error) {
	var out GetFollowListReply
	pattern := "/v1/user/follows"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetFollowList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) GetLikeList(ctx context.Context, in *GetLikeListRequest, opts ...http.CallOption) (*GetLikeListReply, error) {
	var out GetLikeListReply
	pattern := "/v1/user/likes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetLikeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...http.CallOption) (*GetUserProfileReply, error) {
	var out GetUserProfileReply
	pattern := "/v1/user/{user_id}/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...http.CallOption) (*UnfollowUserReply, error) {
	var out UnfollowUserReply
	pattern := "/v1/user/unfollow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserServiceUnfollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
