// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: message/v1/message.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMessageServiceGetMessageList = "/api.message.v1.MessageService/GetMessageList"
const OperationMessageServiceUnlockMessage = "/api.message.v1.MessageService/UnlockMessage"

type MessageServiceHTTPServer interface {
	// GetMessageList 获取消息列表（包含聊天与小纸条）
	GetMessageList(context.Context, *GetMessageListRequest) (*GetMessageListReply, error)
	// UnlockMessage 解锁一条小纸条（message_type=1）
	UnlockMessage(context.Context, *UnlockMessageRequest) (*UnlockMessageReply, error)
}

func RegisterMessageServiceHTTPServer(s *http.Server, srv MessageServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/message/list", _MessageService_GetMessageList0_HTTP_Handler(srv))
	r.POST("/v1/message/{message_id}/unlock", _MessageService_UnlockMessage0_HTTP_Handler(srv))
}

func _MessageService_GetMessageList0_HTTP_Handler(srv MessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMessageListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageServiceGetMessageList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMessageList(ctx, req.(*GetMessageListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMessageListReply)
		return ctx.Result(200, reply)
	}
}

func _MessageService_UnlockMessage0_HTTP_Handler(srv MessageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnlockMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMessageServiceUnlockMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnlockMessage(ctx, req.(*UnlockMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnlockMessageReply)
		return ctx.Result(200, reply)
	}
}

type MessageServiceHTTPClient interface {
	GetMessageList(ctx context.Context, req *GetMessageListRequest, opts ...http.CallOption) (rsp *GetMessageListReply, err error)
	UnlockMessage(ctx context.Context, req *UnlockMessageRequest, opts ...http.CallOption) (rsp *UnlockMessageReply, err error)
}

type MessageServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMessageServiceHTTPClient(client *http.Client) MessageServiceHTTPClient {
	return &MessageServiceHTTPClientImpl{client}
}

func (c *MessageServiceHTTPClientImpl) GetMessageList(ctx context.Context, in *GetMessageListRequest, opts ...http.CallOption) (*GetMessageListReply, error) {
	var out GetMessageListReply
	pattern := "/v1/message/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMessageServiceGetMessageList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MessageServiceHTTPClientImpl) UnlockMessage(ctx context.Context, in *UnlockMessageRequest, opts ...http.CallOption) (*UnlockMessageReply, error) {
	var out UnlockMessageReply
	pattern := "/v1/message/{message_id}/unlock"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMessageServiceUnlockMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
