// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"pet-angel/internal/biz"
	"pet-angel/internal/conf"
	"pet-angel/internal/data"
	"pet-angel/internal/server"
	"pet-angel/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(srv *conf.Server, dataConf *conf.Data, authConf *conf.Auth, minioConf *conf.Minio, storageConf *conf.Storage, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(dataConf, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	authRepo := data.NewAuthRepo(dataData)
	authUsecase := biz.NewAuthUsecase(authRepo, authConf)
	authService := service.NewAuthService(authUsecase, authConf, logger)
	userRepoImpl := data.NewUserRepo(dataData)
	userUsecase := biz.NewUserUsecase(userRepoImpl)
	userService := service.NewUserService(userUsecase, authConf, logger)
	communityRepoImpl := data.NewCommunityRepo(dataData)
	communityUsecase := biz.NewCommunityUsecase(communityRepoImpl)
	communityService := service.NewCommunityService(communityUsecase, authConf, logger)
	avatarRepo := data.NewAvatarRepo(dataData)
	avatarUsecase := biz.NewAvatarUsecase(avatarRepo)
	avatarService := service.NewAvatarService(avatarUsecase, authConf, logger)
	messageRepoImpl := data.NewMessageRepo(dataData)
	messageUsecase := biz.NewMessageUsecase(messageRepoImpl)
	messageService := service.NewMessageService(messageUsecase, logger)
	grpcServer := server.NewGRPCServer(srv, greeterService, authService, userService, communityService, avatarService, messageService, logger)
	httpServer := server.NewHTTPServer(srv, storageConf, greeterService, authService, userService, communityService, avatarService, messageService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
